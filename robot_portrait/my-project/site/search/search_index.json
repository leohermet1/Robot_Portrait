{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Robot Portrait Group 1 For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#robot-portrait-group-1","text":"For full documentation visit mkdocs.org .","title":"Robot Portrait Group 1"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"GA/","text":"Genetic Algorithm Functions createPop - Create a population taking 9 random faces from the database. Takes as parameters: - encodedVectors (numpy.array) : Numpy array of vectors corresponding to the encoded pictures from the database - X_test(numpy.array) : Numpy array of the pictures of the testing part Returns: - population (numpy.array): Numpy array of the 9 random vectors that are will be displayed to the witness for the first choice crossingOver - Take the 3 first choosen pictures and merge the top of one of them with the bottom of the other one. Takes as parameters: - population (numpy.array) : Numpy array of vectors corresponding to the pictures that the witness chose Returns: - new_pop (numpy.array): Numpy array of the 6 vectors that are created by crossing the 3 first vectors of the population mutationFunction - Mutate the choosen pictures in a range. Takes as parameters: - population (numpy.array) : Numpy array of vectors corresponding to the pictures that the witness chose Returns: - popToMutate (numpy.array): Numpy array of vectors who may have undergone a mutation completePop - Using the crossed and mutated pictures, generate a new population with if needed pictures from the databse. Takes as parameters: - population (numpy.array) : Numpy array of vectors corresponding to the pictures that the witness chose Returns: - populationToBeShown (numpy.array): Numpy array of \"children\" vectors that can be either crossed from the parents, mutated or taken from the database","title":"GA"},{"location":"GA/#genetic-algorithm","text":"","title":"Genetic Algorithm"},{"location":"GA/#functions","text":"createPop - Create a population taking 9 random faces from the database. Takes as parameters: - encodedVectors (numpy.array) : Numpy array of vectors corresponding to the encoded pictures from the database - X_test(numpy.array) : Numpy array of the pictures of the testing part Returns: - population (numpy.array): Numpy array of the 9 random vectors that are will be displayed to the witness for the first choice crossingOver - Take the 3 first choosen pictures and merge the top of one of them with the bottom of the other one. Takes as parameters: - population (numpy.array) : Numpy array of vectors corresponding to the pictures that the witness chose Returns: - new_pop (numpy.array): Numpy array of the 6 vectors that are created by crossing the 3 first vectors of the population mutationFunction - Mutate the choosen pictures in a range. Takes as parameters: - population (numpy.array) : Numpy array of vectors corresponding to the pictures that the witness chose Returns: - popToMutate (numpy.array): Numpy array of vectors who may have undergone a mutation completePop - Using the crossed and mutated pictures, generate a new population with if needed pictures from the databse. Takes as parameters: - population (numpy.array) : Numpy array of vectors corresponding to the pictures that the witness chose Returns: - populationToBeShown (numpy.array): Numpy array of \"children\" vectors that can be either crossed from the parents, mutated or taken from the database","title":"Functions"},{"location":"Test_visual_interface/","text":"Visual Interface Functions visualInterface - This function permits to define a dynamic graphical interface and to show it. Takes as parameters: - encodedVectors (numpy.array) : Numpy array of vectors corresponding to the encoded pictures from the database - decoderModel (keras model) : Model previously trained to decode images - popCreated (numpy.array) : Numpy array of vectors corresponding to the 9 encoded pictures choosen from the database at random - indexPop (numpy.array) : Numpy array of values corresponding to the index of the images choosen from the database - randomseed (float) : Float number to fix a seed for random numbers in order to be reproductible for the unitary test Returns: - None popCreatedInsideFunction - This function permits to create the population that is created at the beginning and to update it in case of refresh Takes as parameters: - popCreatedGiven (numpy.array) : Numpy array of vectors corresponding to the encoded pictures Returns: - None CreationPopUsed - This function permits to know if the initial population was already use or not, usefull at the beginning and at each call of the refresh button Takes as parameters: - popCreatedUsed (numpy.array) : Numpy array of vectors corresponding to the encoded pictures Returns: - boolean value depending on the case refreshFunction - This function permits to define the new 9 pictures that will be put on the graphical interface after the click on the button Refresh Takes as parameters: - encodedVectors (numpy.array) : Numpy array of vectors corresponding to the encoded pictures from the database Returns: - None update_image - This function permits to define the action of the refresh button : it put 9 new pictures on the graphical interface. Takes as parameters: - event (event) : Action collected when the button is clicked #\u00e0 v\u00e9rifier Returns: - None FunctionimageToShow2 - This function permits to update the canvas with the new pictures, so that the pictures don't get garbage collected Takes as parameters: - imageToShow2 (numpy.array) : Numpy array corresponding to the images that will be put in the canvas Returns: -None defineCompletePop - This function permits to be able to access and update completePop (to avoid again the garbage collection event) Takes as parameters: - population (numpy.array) : Numpy array of vectors corresponding to the encoded pictures from the database - encodedVectors (numpy.array) : Numpy array of vectors corresponding to the encoded pictures from the database - indexPop (numpy.array) : Numpy array of values corresponding to the index of the images choosen from the database - randomseed (float) : Float number to fix a seed for random numbers in order to be reproductible for the unitary test - completePop (numpy.array) : Numpy array of vectors Returns: - None launchGA - This function permits to launch the genetic algorithm Takes as parameters: - event (event) : Action collected when the button is clicked#\u00e0 v\u00e9rifier Returns: -None","title":"visualInterface"},{"location":"Test_visual_interface/#visual-interface","text":"","title":"Visual Interface"},{"location":"Test_visual_interface/#functions","text":"visualInterface - This function permits to define a dynamic graphical interface and to show it. Takes as parameters: - encodedVectors (numpy.array) : Numpy array of vectors corresponding to the encoded pictures from the database - decoderModel (keras model) : Model previously trained to decode images - popCreated (numpy.array) : Numpy array of vectors corresponding to the 9 encoded pictures choosen from the database at random - indexPop (numpy.array) : Numpy array of values corresponding to the index of the images choosen from the database - randomseed (float) : Float number to fix a seed for random numbers in order to be reproductible for the unitary test Returns: - None popCreatedInsideFunction - This function permits to create the population that is created at the beginning and to update it in case of refresh Takes as parameters: - popCreatedGiven (numpy.array) : Numpy array of vectors corresponding to the encoded pictures Returns: - None CreationPopUsed - This function permits to know if the initial population was already use or not, usefull at the beginning and at each call of the refresh button Takes as parameters: - popCreatedUsed (numpy.array) : Numpy array of vectors corresponding to the encoded pictures Returns: - boolean value depending on the case refreshFunction - This function permits to define the new 9 pictures that will be put on the graphical interface after the click on the button Refresh Takes as parameters: - encodedVectors (numpy.array) : Numpy array of vectors corresponding to the encoded pictures from the database Returns: - None update_image - This function permits to define the action of the refresh button : it put 9 new pictures on the graphical interface. Takes as parameters: - event (event) : Action collected when the button is clicked #\u00e0 v\u00e9rifier Returns: - None FunctionimageToShow2 - This function permits to update the canvas with the new pictures, so that the pictures don't get garbage collected Takes as parameters: - imageToShow2 (numpy.array) : Numpy array corresponding to the images that will be put in the canvas Returns: -None defineCompletePop - This function permits to be able to access and update completePop (to avoid again the garbage collection event) Takes as parameters: - population (numpy.array) : Numpy array of vectors corresponding to the encoded pictures from the database - encodedVectors (numpy.array) : Numpy array of vectors corresponding to the encoded pictures from the database - indexPop (numpy.array) : Numpy array of values corresponding to the index of the images choosen from the database - randomseed (float) : Float number to fix a seed for random numbers in order to be reproductible for the unitary test - completePop (numpy.array) : Numpy array of vectors Returns: - None launchGA - This function permits to launch the genetic algorithm Takes as parameters: - event (event) : Action collected when the button is clicked#\u00e0 v\u00e9rifier Returns: -None","title":"Functions"},{"location":"autoencoder/","text":"autoencoder functions get_pictures - Returns a numpy array of the pixels of all the pictures. Takes as parameters: - file_str(string) : String of the directory towards the file containing all the celebA pictures Returns: - celebA (numpy.array): Numpy array of the pixels of each picture in the file creat_train_data - Returns the training part and the testing part of data of the pictures which will be used to train the model after. Takes as parameters: - celebA (numpy.array) : Numpy array of the pixels of each picture in the file. Returns: - X_train (numpy.array): Numpy array of the pictures of the training part - X_test (numpy.array): Numpy array of the pictures of the testing part get_models - Returns the autoencoder and decoder model (dercoder model with the same layers with that of autoencoder) Takes as parameters: - None Returns: - X_d ,X_AE (model) : autoencoder and decoder model train_autoencoder_model - Returns the trained autoencoder with our pictures Takes as parameters: - X_train (numpy.array) : Numpy array of the pictures of the training part - X_test(numpy.array) : Numpy array of the pictures of the testing part Returns: - X_AE (model) : trained autoencoder (decoder is trained automatically within the training of autoencoder) auto_encoder - Returns the encoded pictures and the decoded pictures with the models Takes as parameters: - None Returns: - encoded(numpy.array) : Numpy array of the pixels of the encoded pictures - reconstructed(numpy.array) : Numpy array of the pixels of the decoded pictures","title":"autoencoder"},{"location":"autoencoder/#autoencoder","text":"","title":"autoencoder"},{"location":"autoencoder/#functions","text":"get_pictures - Returns a numpy array of the pixels of all the pictures. Takes as parameters: - file_str(string) : String of the directory towards the file containing all the celebA pictures Returns: - celebA (numpy.array): Numpy array of the pixels of each picture in the file creat_train_data - Returns the training part and the testing part of data of the pictures which will be used to train the model after. Takes as parameters: - celebA (numpy.array) : Numpy array of the pixels of each picture in the file. Returns: - X_train (numpy.array): Numpy array of the pictures of the training part - X_test (numpy.array): Numpy array of the pictures of the testing part get_models - Returns the autoencoder and decoder model (dercoder model with the same layers with that of autoencoder) Takes as parameters: - None Returns: - X_d ,X_AE (model) : autoencoder and decoder model train_autoencoder_model - Returns the trained autoencoder with our pictures Takes as parameters: - X_train (numpy.array) : Numpy array of the pictures of the training part - X_test(numpy.array) : Numpy array of the pictures of the testing part Returns: - X_AE (model) : trained autoencoder (decoder is trained automatically within the training of autoencoder) auto_encoder - Returns the encoded pictures and the decoded pictures with the models Takes as parameters: - None Returns: - encoded(numpy.array) : Numpy array of the pixels of the encoded pictures - reconstructed(numpy.array) : Numpy array of the pixels of the decoded pictures","title":"functions"}]}